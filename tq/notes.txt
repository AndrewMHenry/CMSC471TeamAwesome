Current Bugs
============================

Need to optimize the case where asking questions will
have a result that returns no movies.
  - Try to avoid this case as much as possible.
Optimize the case where the movies all have the same identical features.

TO DO:
Implement a way to add weight to a movie
If the game could not figure out the movie:
  then at end of game ask user to enter name of the movie.
  then record that name to a log file and give it a weight(0 or 1)
  you can increment a movie weight each time users choose it as
  their favorite movies

Note: This is my finding while running a few test:
 Lets assume I randomly choose 'Casino' as the movie
 to guess. This is movie number 16th in movies.csv file
 its struct looks like this: {'Casino': ['Crime', 'Drama']}.
 I noticed that if the algo asked: Is the movie Drama?
 And user enters yes, then it might be better for algo to
 ask next if movie is Crime?
 what that means is because user first said yes to Drama,
 algo will look for all movies title containing genres 'Drama' and pick
 the movie where the genres is the smallest length. Next pick another genre
 from the same movie list of genres to ask. Once length of list of genres
 is reached, we might have guessed the movie. If another genre from that movie
 list of genres is not the user choice, then pop movie from collections and
 continue the search.

 This can optimize the algo because, it reduces the number of questions 
 asked to users and avoid unnecessary search while we might be closer to Solution


Currently, the game mistakenly counts ALL features as discrete features, not
just the discrete features.  As a result, it can ask discrete questions
about continuous features, which is not in the specification of our
algorithm.  However, it might be worth seeing if that is more effective
later; if so, we could change the algorithm to include some or all
continuous features in the discrete phase.
